(define (make-table same-key?)
  (let ((local-table (list '*table*)))
    (define (assoc key records)
      (cond ((null? records) #f)
            ((same-key? key (caar records)) (car records))
            (else (assoc key (cdr records)))))
    (define (lookup key)
      (lookup-iter key local-table))
    (define (lookup-iter key local-table)
      (if (not (null? key))
          (let ((subtable (assoc (car key) (cdr local-table))))
            (if subtable
                (if (null? (cdr key))
                    (cdr subtable)
                    (lookup-iter (cdr key) subtable))
                #f))
          (error "key error" key)))
    (define (insert! key value)
      (insert-iter! key value local-table))
    (define (insert-iter! key value local-table)
      (if (not (null? key))
          (begin
            (let ((subtable (assoc (car key) (cdr local-table))))
              (if subtable
                  (if (null? (cdr key))
                      (set-cdr! subtable value)
                      (insert-iter! (cdr key) value subtable))
                  (set-cdr! local-table
                            (cons (insert-iter key value)
                                  (cdr local-table)))))
            'ok)
          (error "key error" key)))
    (define (insert-iter key value)
      (if (null? (cdr key))
          (cons (car key) value)
          (list (car key) (insert-iter (cdr key) value))))
    (define (dispatch m)
      (cond ((eq? m 'lookup-proc) lookup)
            ((eq? m 'insert-proc!) insert!)
            (else (error "Unknown operation -- TABLE" m))))
    dispatch))

(define operation-table (make-table equal?))
(define lookup (operation-table 'lookup-proc))
(define insert! (operation-table 'insert-proc!))

; (insert! (list 'letters 'a) 97)
; (insert! (list 'letters 'b) 98)
; (insert! (list 'math '+) 43)
; (insert! (list 'math '-) 45)
; (insert! (list 'math '*) 42)

; (insert! '(k0 k0) 0)
; (insert! '(k0 k1) 1)
; (insert! '(k0 k2) 2)
; (insert! '(k1 k0) 10)
; (insert! '(k1 k1) 11)
; (insert! '(k1 k2) 12)
; (insert! '(k2 k0) 20)
; (insert! '(k2 k1) 21)
; (insert! '(k2 k2) 22)

; うまくいかない
; (insert! '(1) 1)
; (insert! '(2) 2)
; (insert! '(1 1) 11)
; (insert! '(1 2) 12)
; (insert! '(2 1) 21)
; (insert! '(2 2) 22)
; (insert! '(1 1 1) 111)
; (insert! '(1 2 2) 122)
; (insert! '(2 2 2) 222)
; (insert! '(1 2 3 4) 1234)
