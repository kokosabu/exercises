(define (front-ptr queue) (car queue))
(define (rear-ptr queue) (cdr queue))
(define (set-front-ptr! queue item) (set-car! queue item))
(define (set-rear-ptr! queue item) (set-cdr! queue item))


(define (make-queue) (cons '() '()))
(define (empty-queue? queue) (null? (front-ptr queue)))

(define (front-queue queue)
  (if (empty-queue? queue)
      (error "FRONT called with an empty queue" queue)
      (caar (front-ptr queue))))
(define (rear-queue queue)
  (if (empty-queue? queue)
      (error "REAR called with an empty queue" queue)
      (caar (rear-ptr queue))))

(define (front-insert-queue! queue item)
  (let ((new-pair1 (cons item '())))
    (let ((new-pair2 (cons new-pair1 '())))
      (if (empty-queue? queue)
          (begin (set-front-ptr! queue new-pair2)
                 (set-rear-ptr! queue new-pair2)
                 (print-queue queue))
          (begin (set-cdr! (car (front-ptr queue)) new-pair2)
                 (set-cdr! new-pair2 (front-ptr queue))
                 (set-front-ptr! queue new-pair2)
                 (print-queue queue))))))
(define (rear-insert-queue! queue item)
  (let ((new-pair1 (cons item '())))
    (let ((new-pair2 (cons new-pair1 '())))
      (if (empty-queue? queue)
          (begin (set-front-ptr! queue new-pair2)
                 (set-rear-ptr! queue new-pair2)
                 (print-queue queue))
          (begin (set-cdr! new-pair1 (rear-ptr queue))
                 (set-cdr! (rear-ptr queue) new-pair2)
                 (set-rear-ptr! queue new-pair2)
                 (print-queue queue))))))

(define (front-delete-queue! queue)
  (if (eq? (front-ptr queue) (rear-ptr queue))
      (begin (set-front-ptr! queue '())
             (set-rear-ptr! queue '())
             (print-queue queue))
      (begin (set-front-ptr! queue (cdr (front-ptr queue)))
             (set-cdr! (car (front-ptr queue)) '())
             (print-queue queue))))
(define (rear-delete-queue! queue)
  (if (eq? (front-ptr queue) (rear-ptr queue))
      (begin (set-front-ptr! queue '())
             (set-rear-ptr! queue '())
             (print-queue queue))
      (begin (set-rear-ptr! queue (cdar (rear-ptr queue)))
             (set-cdr! (rear-ptr queue) '())
             (print-queue queue))))

(define (print-queue queue)
  (define (iter q l)
    (if (null? q)
        l
        (iter (cdr q) (append l (list (caar q))))))
  (iter (front-ptr queue) '()))
